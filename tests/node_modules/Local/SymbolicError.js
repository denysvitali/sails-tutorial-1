/**
 * Unit test for SymbolicError
 */

var TestSetup = require ('Local/TestSetup')
var test = new TestSetup (__filename)
var SymbolicError = test.require ()

var assert = require ('assert')

describe ('SymbolicError, constructor forms)', function () {
    describe ('#constructor all args', function () {
        it ('has its properties set after the constructor', function () {
            // To generate stack trace
            SymbolicError.setDebug (true)

            var s = 'login and password invalid';
            var e2 = new Error ("blah blah")
            var e = new SymbolicError ('auth.badCredentials', s, e2)
            assert (e.symbol === 'auth.badCredentials')
            assert (e.chained === e2)
            assert (e.message === s)
            
            // Look for stack trace in test
            if (e2.stack)
                console.log (("" + e).indexOf ('Test.Runnable') > 0)
        })
    }),

    describe ('#constructor 2 args, first null (symbol)', function () {
        it ('has default symbol unknown and message that was passed', function () {
            var s = 'login and password invalid'
            var e = new SymbolicError (null, s)
            assert (e.symbol === 'unknown')
            assert (e.message === s)
        })
    }),

    describe ('#constructor instanceof Error', function () {
        it ('is an instanceof Error class', function () {
            var e = new SymbolicError ()
            assert (e instanceof Error);
        })
    })
})

