/**
 * Unit test for Params
 */

var TestSetup = require ('Local/TestSetup')
var test = new TestSetup (__filename)
var Params = test.require ()

var assert = require ('assert')

function makeMockRequest (obj) {
    var o = obj
    o.id = 1
    return {
      params: {
        all: function () {
          return o
        }
      }
    }
}

describe ('Params (Local Module)', function () {
    describe ('#constructor', function () {
        it ('should copy all passed parameters.', function () {

            var req = makeMockRequest ({ 'hello': 1, 'world': 5, 'howdy': 'there' });
            var pm = new Params (req);

            assert.equal (true, pm.has ('hello'), "1st property is there");
            assert.equal (1, pm.get ('hello'), "first property value equal");

            assert.equal (true, pm.has ('world'), "2nd property is there");
            assert.equal (5, pm.get ('world'), "2nd property value equal");

            assert.equal (true, pm.has ('howdy'), "3rd property is there");
            assert.equal ('there', pm.get ('howdy'), "3rd property value equal");
        })  // it
    }),

    describe ('#delete', function () {
        it ('should delete item', function () {

            var req = makeMockRequest ({ 'hello': 1, 'world': 5, 'howdy': 'there' });
            var pm = new Params (req);

            pm.delete ('hello');

            assert.equal (false, pm.has ('hello'), "1st property is there");

            assert.equal (true, pm.has ('world'), "2nd property is there");
            assert.equal (5, pm.get ('world'), "2nd property value equal");

            assert.equal (true, pm.has ('howdy'), "3rd property is there");
            assert.equal ('there', pm.get ('howdy'), "3rd property value equal");
        })
    }),

    describe ('#apply', function () {
        it ('should apply functions to array items', function () {

            var req = makeMockRequest ({ 'hello': 1, 'world': 5 });
            var pm = new Params (req);

            var criteria = ['world'];
            var blahFunction = function (x) { return x + "blah" };
            pm.apply (criteria, blahFunction);

            assert.equal (true, pm.has ('hello'), "1st property is there");
            assert.equal (1, pm.get ('hello'), "first property value equal");

            assert.equal (true, pm.has ('world'), "2nd property is there");
            assert.equal ("5blah", pm.get ('world'), "applied value - 2nd property value got applied");
        })
    })


})

