/**
 * @module Local/MethodInterceptor.js
 * @desc Utility object for intercepting/wrapping methods
 */

module.exports = MethodInterceptor

function MethodInterceptor (interceptorFn) {
    this.interceptorFn = interceptorFn
}

var Class = MethodInterceptor.prototype;

Class.intercept = function (obj) {
    for (var name in obj) {

        // Only wrap local functions

        if ( ! obj.hasOwnProperty (name) || typeof obj [name] !== 'function')
            continue;

        // fn is original function on the object, to wrap

        var originalFn = obj [name];
        var ifn = this.interceptorFn;

        // set method on object to be our function wrapper, which gets
        // the original function (fn), this, and arguments array

        var interceptorObject = this;

        obj [name] = function () {
            return ifn.call (interceptorObject, originalFn, this, arguments)
        }
    }

    return obj;
}

