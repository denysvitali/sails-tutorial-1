/**
 * @module Local/SailsControllerInterceptorSingleton.js
 * @desc Utility object for intercepting/wrapping methods
 */

var inherits = require ('util').inherits
var MethodInterceptor = require ('Local/MethodInterceptor')
var SymbolicError = require ('Local/SymbolicError')

module.exports = _SailsControllerInterceptorSingleton;

function SailsControllerInterceptorSingleton () {
    MethodInterceptor.call (this, Class.controllerAction);
}

inherits (SailsControllerInterceptorSingleton, MethodInterceptor)

var Class = SailsControllerInterceptorSingleton.prototype;

/**
 * Call this function to finish a controller method, e.g. from an error callback
 * @example
 * 
 *     .then (function (user) { res.json (user) })
 *     .catch (function (e) { ci.error (res, e) })  // <= call here with exception
 */
Class.error = function (res, e) {
    // SymbolicErrors are designed to serialize correctly

    if (e instanceof SymbolicError)
        res.json ({ error: e });  // Google JSON standard (error: or data:)
    else
        throw e; // Unhandled/unexpected exception
}

Class.controllerAction = function (originalFn, originalThis, arguments) {
    try {
        var req = arguments [0];
        var res = arguments [1];
        originalFn.apply (originalThis, arguments)
    } catch (e) {
        this.error (res, e);
    }
}

// ** Singleton pattern

var _singleton = null

function _SailsControllerInterceptorSingleton () {
    if (_singleton === null)
        _singleton = new SailsControllerInterceptorSingleton ();

    return _singleton;
}

